using AIAssistantSQL.Interfaces;
using AIAssistantSQL.Services;
using Microsoft.AspNetCore.Mvc;

namespace AIAssistantSQL.Controllers
{
    public class SettingsController : Controller
    {
        private readonly IOllamaService _ollamaService;
        private readonly AIServiceFactory _aiServiceFactory;
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<SettingsController> _logger;

        public SettingsController(
            IOllamaService ollamaService,
            AIServiceFactory aiServiceFactory,
            IServiceProvider serviceProvider,
            ILogger<SettingsController> logger)
        {
            _ollamaService = ollamaService;
            _aiServiceFactory = aiServiceFactory;
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        public async Task<IActionResult> Index()
        {
            var models = await _ollamaService.GetAvailableModelsAsync();
            var currentModel = _ollamaService.GetCurrentModel();
            var providers = _aiServiceFactory.GetAvailableProviders();
            var currentProvider = _aiServiceFactory.GetCurrentProvider();

            ViewBag.AvailableModels = models;
            ViewBag.CurrentModel = currentModel;
            ViewBag.Providers = providers;
            ViewBag.CurrentProvider = currentProvider;

            return View();
        }

        [HttpPost]
        public IActionResult ChangeModel(string modelName)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(modelName))
                {
                    TempData["Error"] = "Por favor selecciona un modelo válido";
                    return RedirectToAction(nameof(Index));
                }

                _ollamaService.SetModel(modelName);
                
                TempData["Success"] = $"✅ Modelo cambiado exitosamente a: <strong>{modelName}</strong><br/>Las próximas consultas usarán este modelo.";
                
                _logger.LogInformation($"Usuario cambió el modelo a: {modelName}");

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al cambiar modelo");
                TempData["Error"] = $"Error al cambiar modelo: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        [HttpPost]
        public async Task<IActionResult> ChangeProvider(string providerName)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(providerName))
                {
                    TempData["Error"] = "Por favor selecciona un proveedor válido";
                    return RedirectToAction(nameof(Index));
                }

                var currentProvider = _aiServiceFactory.GetCurrentProvider();

                _logger.LogInformation($"🔄 Intentando cambiar de '{currentProvider}' a '{providerName}'...");

                // ✅ VALIDAR CONEXIÓN antes de cambiar
                IOllamaService newService;
                
                switch (providerName.ToLower())
                {
                    case "ollama":
                        newService = _serviceProvider.GetRequiredService<OllamaService>();
                        break;
                    case "googleai":
                    case "gemini":
                        newService = _serviceProvider.GetRequiredService<GoogleAIService>();
                        break;
                    case "deepseek":
                    case "deepseekai":
                        newService = _serviceProvider.GetRequiredService<DeepSeekAIService>();
                        break;
                    default:
                        TempData["Error"] = $"Proveedor no reconocido: {providerName}";
                        return RedirectToAction(nameof(Index));
                }

                // Probar conexión
                _logger.LogInformation($"🔍 Verificando disponibilidad de {providerName}...");
                bool isAvailable = await newService.IsAvailableAsync();

                if (!isAvailable)
                {
                    _logger.LogWarning($"❌ {providerName} no está disponible");
                    
                    TempData["Error"] = GenerateErrorMessage(providerName);
                    
                    return RedirectToAction(nameof(Index));
                }

                // ✅ Conexión exitosa, cambiar proveedor
                _aiServiceFactory.SetProvider(providerName);
                
                TempData["Success"] = $"✅ Proveedor cambiado exitosamente a: <strong>{providerName}</strong><br/>" +
                                     $"Conexión verificada correctamente. Todas las consultas usarán este proveedor de IA.";
                
                _logger.LogInformation($"✅ Usuario cambió el proveedor a: {providerName}");

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al cambiar proveedor");
                TempData["Error"] = $"Error al cambiar proveedor: {ex.Message}";
                return RedirectToAction(nameof(Index));
            }
        }

        [HttpPost]
        public async Task<IActionResult> TestProvider(string providerName)
        {
            try
            {
                _logger.LogInformation($"🧪 Probando conexión a {providerName}...");

                IOllamaService service;
                
                switch (providerName.ToLower())
                {
                    case "ollama":
                        service = _serviceProvider.GetRequiredService<OllamaService>();
                        break;
                    case "googleai":
                    case "gemini":
                        service = _serviceProvider.GetRequiredService<GoogleAIService>();
                        break;
                    case "deepseek":
                    case "deepseekai":
                        service = _serviceProvider.GetRequiredService<DeepSeekAIService>();
                        break;
                    default:
                        return Json(new
                        {
                            success = false,
                            message = $"Proveedor no reconocido: {providerName}"
                        });
                }

                bool isAvailable = await service.IsAvailableAsync();

                if (isAvailable)
                {
                    _logger.LogInformation($"✅ {providerName} disponible");
                    
                    return Json(new
                    {
                        success = true,
                        message = $"✅ Conexión exitosa con {providerName}",
                        details = GetSuccessDetails(providerName)
                    });
                }
                else
                {
                    _logger.LogWarning($"❌ {providerName} no disponible");
                    
                    return Json(new
                    {
                        success = false,
                        message = $"❌ No se pudo conectar con {providerName}",
                        details = GetErrorDetails(providerName)
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error probando {providerName}");
                
                return Json(new
                {
                    success = false,
                    message = $"Error al probar conexión: {ex.Message}",
                    details = ex.ToString()
                });
            }
        }

        private string GenerateErrorMessage(string providerName)
        {
            return providerName.ToLower() switch
            {
                "ollama" => @"
                    <strong>❌ Ollama no está disponible</strong><br/>
                    <br/>
                    <strong>Posibles causas:</strong><br/>
                    • Ollama no está ejecutándose<br/>
                    • Puerto 11434 bloqueado<br/>
                    • Modelo no instalado<br/>
                    <br/>
                    <strong>Soluciones:</strong><br/>
                    1. Ejecutar: <code>ollama serve</code><br/>
                    2. Instalar modelo: <code>ollama pull codellama</code><br/>
                    3. Verificar: <code>curl http://localhost:11434/api/tags</code>",

                "googleai" or "gemini" => @"
                    <strong>❌ Google AI no está disponible</strong><br/>
                    <br/>
                    <strong>Posibles causas:</strong><br/>
                    • API Key inválida o expirada<br/>
                    • Sin conexión a internet<br/>
                    • Límites de uso excedidos<br/>
                    <br/>
                    <strong>Soluciones:</strong><br/>
                    1. Verificar API Key en <code>appsettings.json</code><br/>
                    2. Obtener nueva key en: <a href='https://aistudio.google.com/app/apikey' target='_blank'>Google AI Studio</a><br/>
                    3. Verificar conexión a internet",

                "deepseek" or "deepseekai" => @"
                    <strong>❌ DeepSeek AI no está disponible</strong><br/>
                    <br/>
                    <strong>Posibles causas:</strong><br/>
                    • API Key inválida o expirada<br/>
                    • Sin conexión a internet<br/>
                    • Créditos agotados<br/>
                    <br/>
                    <strong>Soluciones:</strong><br/>
                    1. Verificar API Key en <code>appsettings.json</code><br/>
                    2. Obtener nueva key en: <a href='https://platform.deepseek.com/api_keys' target='_blank'>DeepSeek Platform</a><br/>
                    3. Verificar saldo de créditos",

                _ => $"<strong>❌ No se pudo conectar con {providerName}</strong>"
            };
        }

        private string GetSuccessDetails(string providerName)
        {
            return providerName.ToLower() switch
            {
                "ollama" => "Ollama está funcionando correctamente en http://localhost:11434",
                "googleai" or "gemini" => "Conexión exitosa con Google AI (Gemini). API Key válida.",
                "deepseek" or "deepseekai" => "Conexión exitosa con DeepSeek AI. API Key válida y créditos disponibles.",
                _ => "Conexión exitosa"
            };
        }

        private string GetErrorDetails(string providerName)
        {
            return providerName.ToLower() switch
            {
                "ollama" => "Ollama no responde en http://localhost:11434. Asegúrate de que esté ejecutándose: ollama serve",
                "googleai" or "gemini" => "No se pudo conectar con Google AI. Verifica tu API Key y conexión a internet.",
                "deepseek" or "deepseekai" => "No se pudo conectar con DeepSeek AI. Verifica tu API Key y créditos disponibles.",
                _ => "Error de conexión"
            };
        }
    }
}
