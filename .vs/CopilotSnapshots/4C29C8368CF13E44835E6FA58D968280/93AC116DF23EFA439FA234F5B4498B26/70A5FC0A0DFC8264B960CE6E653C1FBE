using AIAssistantSQL.Interfaces;
using AIAssistantSQL.Models;
using System.Text;
using System.Text.Json;

namespace AIAssistantSQL.Services
{
    /// <summary>
    /// Servicio para interactuar con Ollama y generar consultas SQL
    /// </summary>
    public class OllamaService : IOllamaService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly ILogger<OllamaService> _logger;
        private readonly string _model;
        private const string OllamaGenerateEndpoint = "api/generate"; // SIN BARRA INICIAL

        public OllamaService(IConfiguration configuration, ILogger<OllamaService> logger)
        {
            _configuration = configuration;
            _logger = logger;
            _model = _configuration["Ollama:Model"] ?? "llama3.2";
            
            // Configuración EXACTA como tu app SCU
            _httpClient = new HttpClient
            {
                BaseAddress = new Uri("http://localhost:11434/"),
                Timeout = TimeSpan.FromSeconds(35) // Timeout ligeramente mayor que el CancellationToken
            };
            
            // Headers por defecto
            _httpClient.DefaultRequestHeaders.Add("User-Agent", "AIAssistantSQL/1.0");
            _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            _httpClient.DefaultRequestHeaders.Connection.Add("close"); // Forzar cierre de conexiones
            
            _logger.LogInformation($"OllamaService inicializado - Modelo: {_model}");
        }

        public async Task<string> GenerateSQLFromNaturalLanguageAsync(string naturalLanguageQuery, DatabaseSchema schema)
        {
            CancellationTokenSource cts = null;
            HttpResponseMessage response = null;
            
            try
            {
                var prompt = BuildPrompt(naturalLanguageQuery, schema);

                _logger.LogInformation($"🤖 Enviando consulta a Ollama con modelo: {_model}");

                // Request EXACTO como tu app SCU
                var requestData = new
                {
                    model = _model,
                    prompt = prompt,
                    stream = false,
                    options = new 
                    {
                        temperature = 0.3,
                        top_p = 0.8,
                        max_tokens = 1024,
                        num_predict = 512,
                        repeat_penalty = 1.1
                    }
                };

                var json = JsonSerializer.Serialize(requestData);
                using var content = new StringContent(json, Encoding.UTF8, "application/json");

                _logger.LogInformation($"📤 Enviando petición a: {OllamaGenerateEndpoint}");

                // CancellationToken igual que tu app SCU
                cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));

                try
                {
                    // USAR URL RELATIVA como en tu app SCU
                    response = await _httpClient.PostAsync(OllamaGenerateEndpoint, content, cts.Token);
                    
                    _logger.LogInformation($"📨 Respuesta recibida: {response.StatusCode}");

                    if (!response.IsSuccessStatusCode)
                    {
                        var errorContent = await response.Content.ReadAsStringAsync(cts.Token);
                        _logger.LogWarning($"⚠️ Ollama respondió con error: {response.StatusCode} - {response.ReasonPhrase}");
                        
                        return "**Error de conexion con IA**\n\n" +
                               $"**Estado:** {response.StatusCode} - {response.ReasonPhrase}\n" +
                               "**Solucion:**\n" +
                               "1. Verificar que Ollama este ejecutandose: `ollama serve`\n" +
                               "2. Comprobar que el modelo este instalado: `ollama pull llama3.2`\n" +
                               "3. Verificar conectividad en: http://localhost:11434\n\n" +
                               "**Nota:** El sistema continua funcionando normalmente.";
                    }

                    string responseContent;
                    try
                    {
                        responseContent = await response.Content.ReadAsStringAsync(cts.Token);
                        _logger.LogInformation($"📄 Contenido recibido: {responseContent.Length} caracteres");
                    }
                    catch (Exception readEx)
                    {
                        _logger.LogError(readEx, "❌ Error leyendo contenido de respuesta");
                        throw new Exception("Error leyendo respuesta de IA");
                    }

                    if (string.IsNullOrWhiteSpace(responseContent))
                    {
                        _logger.LogWarning("⚠️ Respuesta vacía de Ollama");
                        throw new Exception("Respuesta vacía del servicio de IA");
                    }

                    JsonDocument jsonResponse;
                    try
                    {
                        jsonResponse = JsonDocument.Parse(responseContent);
                    }
                    catch (JsonException jsonEx)
                    {
                        _logger.LogError(jsonEx, "❌ Error deserializando JSON");
                        throw new Exception("Error procesando respuesta de IA");
                    }

                    // Parsear respuesta IGUAL que tu app SCU
                    if (jsonResponse.RootElement.TryGetProperty("response", out JsonElement responseElement))
                    {
                        var generatedText = responseElement.GetString();
                        if (!string.IsNullOrWhiteSpace(generatedText))
                        {
                            _logger.LogInformation("✅ Respuesta de IA procesada exitosamente");
                            
                            // Pequeña pausa para asegurar completion
                            await Task.Delay(10, cts.Token);
                            
                            var sql = ExtractSqlFromResponse(generatedText);
                            _logger.LogInformation($"✅ SQL generado exitosamente: {sql}");
                            
                            return sql;
                        }
                        else
                        {
                            _logger.LogWarning("⚠️ Respuesta de IA vacía en campo 'response'");
                            throw new Exception("Respuesta vacía. Intente con una pregunta más específica.");
                        }
                    }

                    // Verificar si hay un error en la respuesta
                    if (jsonResponse.RootElement.TryGetProperty("error", out JsonElement errorElement))
                    {
                        var errorMessage = errorElement.GetString();
                        _logger.LogError($"❌ Error reportado por Ollama: {errorMessage}");
                        throw new Exception($"Error del servicio de IA: {errorMessage}");
                    }

                    _logger.LogWarning("⚠️ Estructura de respuesta inesperada");
                    throw new Exception("Respuesta inesperada del servicio de IA");
                }
                catch (OperationCanceledException) when (cts?.Token.IsCancellationRequested == true)
                {
                    _logger.LogWarning("⏰ Timeout de 30 segundos alcanzado");
                    throw new Exception(
                        "⏰ Timeout del servicio de IA\n\n" +
                        "La consulta tardó demasiado (30 segundos).\n\n" +
                        "Sugerencias:\n" +
                        "- Intente con una pregunta más corta\n" +
                        "- Verifique recursos del sistema\n" +
                        "- Reinicie Ollama si persiste");
                }
                finally
                {
                    // CRÍTICO: Liberar recursos HTTP
                    if (response != null)
                    {
                        try
                        {
                            response.Dispose();
                        }
                        catch (Exception disposeEx)
                        {
                            _logger.LogWarning(disposeEx, "⚠️ Error liberando HttpResponseMessage");
                        }
                    }
                }
            }
            catch (HttpRequestException httpEx)
            {
                _logger.LogError(httpEx, "🌐 Error de conexión HTTP");
                throw new Exception(
                    $"❌ Error de conectividad\n\n" +
                    $"Detalle: {httpEx.Message}\n\n" +
                    "Soluciones:\n" +
                    "1. Verificar que Ollama esté ejecutándose: ollama serve\n" +
                    "2. Comprobar puerto 11434\n" +
                    "3. Verificar firewall\n" +
                    "4. Probar: curl http://localhost:11434/api/tags",
                    httpEx);
            }
            catch (Exception ex) when (ex is not OperationCanceledException && ex is not HttpRequestException)
            {
                _logger.LogError(ex, "❌ Error inesperado");
                throw new Exception($"Error al comunicarse con Ollama: {ex.Message}", ex);
            }
            finally
            {
                // CRÍTICO: Liberar CancellationTokenSource
                try
                {
                    cts?.Dispose();
                }
                catch (Exception ctsEx)
                {
                    _logger.LogWarning(ctsEx, "⚠️ Error liberando CancellationTokenSource");
                }

                // CRÍTICO: Garbage collection
                try
                {
                    GC.Collect();
                    GC.WaitForPendingFinalizers();
                }
                catch (Exception gcEx)
                {
                    _logger.LogWarning(gcEx, "⚠️ Error en GC");
                }
            }
        }

        public async Task<bool> IsAvailableAsync()
        {
            try
            {
                _logger.LogInformation("🔍 Verificando disponibilidad de Ollama...");

                var response = await _httpClient.GetAsync("api/tags");

                _logger.LogInformation($"📡 Respuesta: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    _logger.LogInformation("✅ Ollama disponible");
                    return true;
                }
                else
                {
                    _logger.LogWarning($"⚠️ Ollama respondió: {response.StatusCode}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "❌ Ollama no disponible");
                return false;
            }
        }

        private string BuildPrompt(string naturalLanguageQuery, DatabaseSchema schema)
        {
            var sb = new StringBuilder();

            sb.AppendLine("You are a SQL expert. Generate ONLY a SQL SELECT query based on the user's natural language request.");
            sb.AppendLine("IMPORTANT: Return ONLY the SQL query without any explanations, markdown, or additional text.");
            sb.AppendLine();
            sb.AppendLine($"Database Type: {schema.DatabaseType}");
            sb.AppendLine($"Database Name: {schema.DatabaseName}");
            sb.AppendLine();
            sb.AppendLine("Database Schema:");

            foreach (var table in schema.Tables)
            {
                sb.AppendLine($"\nTable: {table.TableName}");
                sb.AppendLine("Columns:");

                foreach (var column in table.Columns)
                {
                    var nullable = column.IsNullable ? "NULL" : "NOT NULL";
                    var identity = column.IsIdentity ? " (IDENTITY)" : "";
                    sb.AppendLine($"  - {column.ColumnName} ({column.DataType}{(column.MaxLength.HasValue ? $"({column.MaxLength})" : "")}) {nullable}{identity}");
                }

                if (table.PrimaryKeys.Any())
                {
                    sb.AppendLine($"Primary Key: {string.Join(", ", table.PrimaryKeys)}");
                }

                if (table.ForeignKeys.Any())
                {
                    sb.AppendLine("Foreign Keys:");
                    foreach (var fk in table.ForeignKeys)
                    {
                        sb.AppendLine($"  - {fk.ColumnName} -> {fk.ReferencedTable}.{fk.ReferencedColumn}");
                    }
                }
            }

            sb.AppendLine();
            sb.AppendLine($"User Request: {naturalLanguageQuery}");
            sb.AppendLine();
            sb.AppendLine("Generate the SQL SELECT query:");

            return sb.ToString();
        }

        private string ExtractSqlFromResponse(string response)
        {
            // Limpiar markdown code blocks
            var sql = response.Trim();

            // Remover ```sql o ``` al inicio
            if (sql.StartsWith("```sql", StringComparison.OrdinalIgnoreCase))
            {
                sql = sql.Substring(6).Trim();
            }
            else if (sql.StartsWith("```"))
            {
                sql = sql.Substring(3).Trim();
            }

            // Remover ``` al final
            if (sql.EndsWith("```"))
            {
                sql = sql.Substring(0, sql.Length - 3).Trim();
            }

            // Tomar solo la primera sentencia SQL
            var lines = sql.Split('\n');
            var sqlLines = new List<string>();

            foreach (var line in lines)
            {
                var trimmedLine = line.Trim();
                if (string.IsNullOrWhiteSpace(trimmedLine))
                    continue;

                // Si la línea parece ser SQL
                if (trimmedLine.StartsWith("SELECT", StringComparison.OrdinalIgnoreCase) ||
                    trimmedLine.StartsWith("WITH", StringComparison.OrdinalIgnoreCase) ||
                    sqlLines.Any())
                {
                    sqlLines.Add(trimmedLine);

                    // Si termina con ; es el final
                    if (trimmedLine.EndsWith(";"))
                        break;
                }
            }

            return sqlLines.Any() ? string.Join(" ", sqlLines) : sql;
        }
    }
}
